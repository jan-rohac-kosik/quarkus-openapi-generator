package {apiPackage}.auth

import jakarta.annotation.PostConstruct
import jakarta.annotation.Priority
import jakarta.enterprise.context.Dependent
import jakarta.ws.rs.Priorities
import io.quarkiverse.openapi.generator.OpenApiGeneratorConfig
import io.quarkiverse.openapi.generator.providers.*
import java.util.Optional
import jakarta.inject.Inject

@Priority(Priorities.AUTHENTICATION)
class CompositeAuthenticationProvider : AbstractCompositeAuthenticationProvider() {

    @Inject
    lateinit var generatorConfig: OpenApiGeneratorConfig

    {#for auth in oauthMethods.orEmpty}
    @Inject
    lateinit var oAuth2Provider{auth_index}: OAuth2AuthenticationProvider

    @Inject
    lateinit var oidcClientRequestFilterDelegate{auth_index}: OidcClientRequestFilterDelegateImpl{auth_index}
    {/for}

    @PostConstruct
    fun init() {
        {#for auth in oauthMethods.orEmpty}
        oAuth2Provider{auth_index}.init(sanitizeAuthName("{auth.name}"), "{configKey}", oidcClientRequestFilterDelegate{auth_index})
        {/for}

        {#for auth in httpBasicMethods.orEmpty}
        val basicAuthProvider{auth_index} = BasicAuthenticationProvider("{quarkus-generator.openApiSpecId}", sanitizeAuthName("{auth.name}"), generatorConfig)
        this.addAuthenticationProvider(basicAuthProvider{auth_index})
        {#for api in apiInfo.apis}
        {#for op in api.operations.operation}
        {#if op.hasAuthMethods}
        {#for authM in op.authMethods}
        {#if authM.name == auth.name}
        basicAuthProvider{auth_index}.addOperation(
            OperationAuthInfo.builder()
                .withPath("{api.contextPath}{api.commonPath}{op.path.orEmpty}")
                .withId("{op.operationId}")
                .withMethod("{op.httpMethod}")
                .build()
        )
        {/if}
        {/for}
        {#else if defaultSecurityScheme == auth.name}
        basicAuthProvider{auth_index}.addOperation(
            OperationAuthInfo.builder()
                .withPath("{api.contextPath}{api.commonPath}{op.path.orEmpty}")
                .withId("{op.operationId}")
                .withMethod("{op.httpMethod}")
                .build()
        )
        {/if}
        {/for}
        {/for}
        {/for}
        {#for auth in oauthMethods.orEmpty}
        this.addAuthenticationProvider(oAuth2Provider{auth_index})
        {#for api in apiInfo.apis}
        {#for op in api.operations.operation}
        {#if op.hasAuthMethods}
        {#for authM in op.authMethods}
        {#if authM.name == auth.name}
        oAuth2Provider{auth_index}.addOperation(
            OperationAuthInfo.builder()
                .withPath("{api.contextPath}{api.commonPath}{op.path.orEmpty}")
                .withId("{op.operationId}")
                .withMethod("{op.httpMethod}")
                .build()
        )
        {/if}
        {/for}
        {#else if defaultSecurityScheme == auth.name}
        oAuth2Provider{auth_index}.addOperation(
            OperationAuthInfo.builder()
                .withPath("{api.contextPath}{api.commonPath}{op.path.orEmpty}")
                .withId("{op.operationId}")
                .withMethod("{op.httpMethod}")
                .build()
        )
        {/if}
        {/for}
        {/for}
        {/for}
        {#for auth in httpBearerMethods.orEmpty}
        val bearerProvider{auth_index} = BearerAuthenticationProvider("{quarkus-generator.openApiSpecId}", sanitizeAuthName("{auth.name}"), "{auth.scheme}", generatorConfig)
        this.addAuthenticationProvider(bearerProvider{auth_index})
        {#for api in apiInfo.apis}
        {#for op in api.operations.operation}
        {#if op.hasAuthMethods}
        {#for authM in op.authMethods}
        {#if authM.name == auth.name}
        bearerProvider{auth_index}.addOperation(
            OperationAuthInfo.builder()
                .withPath("{api.contextPath}{api.commonPath}{op.path.orEmpty}")
                .withId("{op.operationId}")
                .withMethod("{op.httpMethod}")
                .build()
        )
        {/if}
        {/for}
        {#else if defaultSecurityScheme == auth.name}
        bearerProvider{auth_index}.addOperation(
            OperationAuthInfo.builder()
                .withPath("{api.contextPath}{api.commonPath}{op.path.orEmpty}")
                .withId("{op.operationId}")
                .withMethod("{op.httpMethod}")
                .build()
        )
        {/if}
        {/for}
        {/for}
        {/for}
        {#for auth in apiKeyMethods.orEmpty}
        {#if auth.isKeyInQuery}
        val apiKeyQueryProvider{auth_index} = ApiKeyAuthenticationProvider("{quarkus-generator.openApiSpecId}", sanitizeAuthName("{auth.name}"), ApiKeyIn.query, "{auth.keyParamName}", generatorConfig)
        this.addAuthenticationProvider(apiKeyQueryProvider{auth_index})
        {#for api in apiInfo.apis}
        {#for op in api.operations.operation}
        {#if op.hasAuthMethods}
        {#for authM in op.authMethods}
        {#if authM.name == auth.name}
        apiKeyQueryProvider{auth_index}.addOperation(
            OperationAuthInfo.builder()
                .withPath("{api.contextPath}{api.commonPath}{op.path.orEmpty}")
                .withId("{op.operationId}")
                .withMethod("{op.httpMethod}")
                .build()
        )
        {/if}
        {/for}
        {#else if defaultSecurityScheme == auth.name}
        apiKeyQueryProvider{auth_index}.addOperation(
            OperationAuthInfo.builder()
                .withPath("{api.contextPath}{api.commonPath}{op.path.orEmpty}")
                .withId("{op.operationId}")
                .withMethod("{op.httpMethod}")
                .build()
        )
        {/if}
        {/for}
        {/for}
        {/if}
        {#if auth.isKeyInHeader}
        val apiKeyHeaderProvider{auth_index} = ApiKeyAuthenticationProvider("{quarkus-generator.openApiSpecId}", sanitizeAuthName("{auth.name}"), ApiKeyIn.header, "{auth.keyParamName}", generatorConfig)
        this.addAuthenticationProvider(apiKeyHeaderProvider{auth_index})
        {#for api in apiInfo.apis}
        {#for op in api.operations.operation}
        {#if op.hasAuthMethods}
        {#for authM in op.authMethods}
        {#if authM.name == auth.name}
        apiKeyHeaderProvider{auth_index}.addOperation(
            OperationAuthInfo.builder()
                .withPath("{api.contextPath}{api.commonPath}{op.path.orEmpty}")
                .withId("{op.operationId}")
                .withMethod("{op.httpMethod}")
                .build()
        )
        {/if}
        {/for}
        {#else if defaultSecurityScheme == auth.name}
        apiKeyHeaderProvider{auth_index}.addOperation(
            OperationAuthInfo.builder()
                .withPath("{api.contextPath}{api.commonPath}{op.path.orEmpty}")
                .withId("{op.operationId}")
                .withMethod("{op.httpMethod}")
                .build()
        )
        {/if}
        {/for}
        {/for}
        {/if}
        {#if auth.isKeyInCookie}
        val apiKeyCookieProvider{auth_index} = ApiKeyAuthenticationProvider("{quarkus-generator.openApiSpecId}", sanitizeAuthName("{auth.name}"), ApiKeyIn.cookie, "{auth.keyParamName}", generatorConfig)
        this.addAuthenticationProvider(apiKeyCookieProvider{auth_index})
        {#for api in apiInfo.apis}
        {#for op in api.operations.operation}
        {#if op.hasAuthMethods}
        {#for authM in op.authMethods}
        {#if authM.name == auth.name}
        apiKeyCookieProvider{auth_index}.addOperation(
            OperationAuthInfo.builder()
                .withPath("{api.contextPath}{api.commonPath}{op.path.orEmpty}")
                .withId("{op.operationId}")
                .withMethod("{op.httpMethod}")
                .build()
        )
        {/if}
        {/for}
        {#else if defaultSecurityScheme == auth.name}
        apiKeyCookieProvider{auth_index}.addOperation(
            OperationAuthInfo.builder()
                .withPath("{api.contextPath}{api.commonPath}{op.path.orEmpty}")
                .withId("{op.operationId}")
                .withMethod("{op.httpMethod}")
                .build()
        )
        {/if}
        {/for}
        {/for}
        {/if}
        {/for}
    }

    {#for auth in oauthMethods.orEmpty}
    @Dependent
    {#if is-resteasy-reactive}
    class OidcClientRequestFilterDelegateImpl{auth_index} : io.quarkus.oidc.client.reactive.filter.OidcClientRequestReactiveFilter(), OAuth2AuthenticationProvider.OidcClientRequestFilterDelegate {

        private val clientId = OpenApiGeneratorConfig.getSanitizedSecuritySchemeName("{auth.name}")

        override fun clientId(): Optional<String> {
            return Optional.of(clientId)
        }

        override fun filter(requestContext: jakarta.ws.rs.client.ClientRequestContext) {
            filter(requestContext as org.jboss.resteasy.reactive.client.spi.ResteasyReactiveClientRequestContext)
        }
    }
    {#else}
    class OidcClientRequestFilterDelegateImpl{auth_index} : io.quarkus.oidc.client.filter.OidcClientRequestFilter(), OAuth2AuthenticationProvider.OidcClientRequestFilterDelegate {

        private val clientId = OpenApiGeneratorConfig.getSanitizedSecuritySchemeName("{auth.name}")

        override fun clientId(): Optional<String> {
            return Optional.of(clientId)
        }
    }
    {/if}
    {/for}
}
